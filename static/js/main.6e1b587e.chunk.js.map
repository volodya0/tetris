{"version":3,"sources":["elements.ts","utils.ts","createElement.tsx","sidebar.tsx","gamePlay.tsx","App.tsx","index.tsx"],"names":["random","max","Math","floor","elements","Cube","y","x","Line","T","L","l2","Z","Z2","U","colors","0","1","2","3","getProperties","element","width","reduce","setX","obj","add","Set","size","height","setY","getCurrentCords","map","filter","cordsToArray","cords","fields","Array","fill","forEach","reverse","CreateElement","config","setBlocks","isFreeBlocks","onLose","active","useState","array","color","state","setState","useEffect","blocks","keys","from","length","getElement","Object","values","block","document","querySelector","stepsOnSquare","step","offsetLeft","columns","offSetTop","offSetTopPx","count","style","left","keyboardHandler","e","key","rotatedElement","rotatedArr","arr","row","column","temp","every","rotateArray","rotatedCords","field","push","undefined","x_arr","y_arr","rotateCords","rows","interval","setInterval","top","window","addEventListener","removeEventListener","clearInterval","className","uniqid","Row","Square","Empty","Sidebar","selectSpeedHandler","selectBlocksHandler","type","name","id","value","disabled","onChange","htmlFor","defaultChecked","href","configInit","GamePlay","setConfig","initial","r","isFill","setActive","score","setScore","target","reset","removed","previous","unshift","p","alert","onClick","Score","backgroundColor","setTimeout","Field","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e1b587e.chunk.js","sourcesContent":["import { cords } from './types' \r\n\r\nconst random = (max : number): number => Math.floor(Math.random() * max)\r\n\r\nexport function getElement(blocks : Set<string>) : cords[]{\r\n  let keys : string[] = Array.from(blocks)\r\n  return elements[keys[random(keys.length)]]\r\n}\r\n\r\nexport function getColor() : string{\r\n  return colors[random(Object.values(colors).length)]\r\n}\r\n\r\nconst elements : {[key : string] : cords[] } = {\r\n  Cube : [{y:0,x:0}, {y:1,x:0}, {y:1,x:1}, {y:0,x:1}],\r\n  Line : [{y:0,x:0}, {y:0,x:1}, {y:0,x:2}, {y:0,x:3}],\r\n  T :    [{y:0,x:0}, {y:0,x:1}, {y:0,x:2}, {y:1,x:1}],\r\n  L :    [{y:0,x:0}, {y:1,x:0}, {y:1,x:1}, {y:1,x:2}],\r\n  l2:    [{y:0,x:0}, {y:1,x:0}, {y:1,x:1}, {y:1,x:2}],\r\n  Z :    [{y:0,x:0}, {y:0,x:1}, {y:1,x:1}, {y:1,x:2}],\r\n  Z2:    [{y:1,x:0}, {y:1,x:1}, {y:0,x:1}, {y:0,x:2}],\r\n  U :    [{y:1,x:0}, {y:0,x:0}, {y:0,x:1}, {y:0,x:2}, {y:1,x:2}],\r\n}\r\n\r\nconst colors : {[key : number] : string}= {\r\n  0 : 'green',\r\n  1 : 'blue',\r\n  2 : 'yellow',\r\n  3 : 'red'\r\n}\r\n\r\n","import { cords } from \"./types\"\r\n\r\nexport const random = (max : number) : number => Math.floor(Math.random() * max)\r\n\r\nexport const getProperties = (element : cords[]): {width : number, height : number} => {\r\n  return {\r\n    width : element.reduce((setX, obj) => setX.add(obj.x), new Set()).size,\r\n    height : element.reduce((setY, obj) => setY.add(obj.y), new Set()).size,\r\n  }\r\n}\r\n\r\nexport const getCurrentCords = (y : number, x : number, element : cords[]) : cords[] => {\r\n  return element\r\n    .map((obj : cords):cords => { return { y : y - obj.y,  x : x + obj.x}})\r\n    .filter((obj : cords):boolean => obj.y >= 0 && obj.x >= 0)\r\n}\r\n\r\nexport const cordsToArray = (cords : cords[]): boolean[][] => {\r\n  const {width, height} = getProperties(cords)\r\n  const size = Math.max(width, height)\r\n  const fields = new Array(size).fill(null).map(() =>new Array(size).fill(null).map(() => false))\r\n  cords.forEach(obj => fields[obj.y][obj.x] = true)\r\n  return fields.reverse()\r\n}\r\n\r\nconst rotateArray = (arr : boolean[][]): boolean[][] => {\r\n  arr = arr.map(row => row.reverse())\r\n  for (let row = 0; row < arr.length; row++) {\r\n    for (let column = 0; column < row; column++) {\r\n      let temp = arr[row][column]\r\n      arr[row][column] = arr[column][row]\r\n      arr[column][row] = temp\r\n    }\r\n  }\r\n  arr.filter(row => !row.every(e => e === false))\r\n  return arr;\r\n}\r\n\r\nexport const rotateCords = (cords : cords[]) => {\r\n\r\n  let arr = cordsToArray(cords)\r\n  let rotatedArr = rotateArray(arr)\r\n\r\n  let rotatedCords : cords[] = []\r\n  rotatedArr.reverse()\r\n    .forEach((row, y) => row.forEach((field, x) => field? rotatedCords.push({y, x}) : undefined))\r\n\r\n  let x_arr : number[] = [], y_arr : number[] = []\r\n\r\n  rotatedCords.forEach(obj => {\r\n    x_arr.push(obj.x)\r\n    y_arr.push(obj.y)\r\n  })\r\n\r\n  while(x_arr.every(x => x > 0)){\r\n    rotatedCords.forEach(obj => obj.x = obj.x - 1)\r\n    x_arr = x_arr.map(e => e - 1)\r\n  }  \r\n  \r\n  while(y_arr.every(y => y > 0)){\r\n    rotatedCords.forEach(obj => obj.y = obj.y - 1)\r\n    x_arr = x_arr.map(e => e - 1)\r\n  }  \r\n  \r\n  return rotatedCords\r\n}","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable default-case */\r\nimport { useEffect, useState } from \"react\"\r\nimport uniqid from 'uniqid'\r\nimport { getElement, getColor } from \"./elements\"\r\nimport { componentProps, cords } from './types' \r\nimport { getCurrentCords, getProperties, random, rotateCords, cordsToArray} from './utils'\r\n\r\nexport const CreateElement : React.FC<componentProps> = ({config, setBlocks, isFreeBlocks, onLose, active}) => {\r\n\r\n  const [state, setState] = useState<{array:boolean[][], color:string}>({array:[], color:''})\r\n    \r\n  useEffect(() => {\r\n    let element : cords[] = getElement(config.blocks)\r\n    let color : string = getColor()\r\n    let block : HTMLDivElement | null = document.querySelector('.animate')\r\n    \r\n    if(!block) return\r\n\r\n    if(!active || !element){\r\n      block.style.top = -200 + 'px'\r\n      return\r\n    }\r\n\r\n    let {width, height} = getProperties(element)\r\n    let stepsOnSquare : number = config.size / config.step\r\n    let offsetLeft : number =  random((config.columns - 1) - width) + 1\r\n    let offSetTop : number = 0\r\n    let offSetTopPx : number = 0\r\n    let count : number = 0\r\n  \r\n\r\n    block.style.left = offsetLeft * config.size +'px'\r\n    \r\n    setState({\r\n      array : cordsToArray(element),\r\n      color\r\n    })\r\n\r\n    const keyboardHandler = (e : KeyboardEvent) : void => {\r\n    if(offSetTop > 0)\r\n      switch (e.key) {\r\n\r\n        case 'ArrowLeft':\r\n          if(\r\n            offsetLeft > 0 && \r\n            isFreeBlocks(getCurrentCords(offSetTop, offsetLeft - 1, element))&&\r\n            (count + 5 > stepsOnSquare || isFreeBlocks(getCurrentCords(offSetTop - 1, offsetLeft - 1, element)))\r\n          )\r\n            offsetLeft -= 1\r\n        break;\r\n\r\n        case 'ArrowRight':\r\n          if(\r\n            offsetLeft + getProperties(element).width < config.columns && \r\n            isFreeBlocks(getCurrentCords(offSetTop, offsetLeft + 1, element))&&\r\n            (count + 5 > stepsOnSquare || isFreeBlocks(getCurrentCords(offSetTop - 1, offsetLeft + 1, element)))\r\n          )\r\n            offsetLeft += 1\r\n        break;\r\n\r\n        case 'ArrowUp':\r\n          const rotatedElement : cords[] = rotateCords(element)\r\n          if(\r\n            (offsetLeft + getProperties(rotatedElement).width <= config.columns) && \r\n            isFreeBlocks(getCurrentCords(offSetTop, offsetLeft, rotatedElement)) &&\r\n            isFreeBlocks(getCurrentCords(offSetTop-1, offsetLeft, rotatedElement))\r\n          )\r\n          element = rotatedElement\r\n        break;\r\n\r\n        case 'ArrowDown':\r\n          offSetTopPx += config.step * 5\r\n          count += 5\r\n        break;\r\n      \r\n        case ' ' :\r\n          while(offSetTop + 1 < config.rows && isFreeBlocks(getCurrentCords(offSetTop + 1, offsetLeft, element)))\r\n            offSetTop += 1\r\n        break\r\n      }\r\n    }\r\n    \r\n    const onInterval = (): void => {\r\n      if(!block) return\r\n      \r\n      offSetTopPx += config.step\r\n      count++\r\n      if(count > stepsOnSquare){\r\n        if(offSetTop < config.rows - 1 && isFreeBlocks(getCurrentCords(offSetTop+1, offsetLeft, element))){\r\n          offSetTop += 1\r\n          offSetTopPx = offSetTop * config.size;\r\n        }else{\r\n          offSetTopPx = -200\r\n          setBlocks(getCurrentCords(offSetTop, offsetLeft, element), color)  \r\n          if(offSetTop < height) {\r\n            onLose()\r\n          }\r\n        }\r\n        count = 0 \r\n      }\r\n      block.style.left = offsetLeft * config.size + 'px'\r\n      block.style.top = offSetTopPx + 'px'\r\n      setState({\r\n        array: cordsToArray(element),\r\n        color\r\n      })\r\n    }\r\n\r\n    let interval = setInterval(onInterval, config.interval)\r\n    window.addEventListener('keydown', keyboardHandler)  \r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', keyboardHandler) \r\n      interval && clearInterval(interval)\r\n    }\r\n\r\n  }, [active, config, setBlocks])\r\n\r\n  return <div className='animate'>\r\n      <div>{state.array.map(row => <Row row={row} color={state.color} key={uniqid()}/>)}</div>\r\n    </div>\r\n}\r\n\r\nconst Row : React.FC<{row : boolean[], color:string }> = ({row, color}) => <div className='r'>{\r\n  row.map(fill => fill? <Square key={uniqid()} color={color}/>: <Empty key={uniqid()}/>)\r\n}</div>\r\n\r\nconst Square : React.FC<{color : string}> = ({color}) => <div className={'square ' +color} ></div>\r\nconst Empty = () => <div className='offset' ></div>\r\n","import { sidebarProps } from \"./types\"\r\n\r\nexport const Sidebar : React.FC<sidebarProps> =  ({active, selectSpeedHandler, selectBlocksHandler}) => {\r\n  return  <div className='sidebar'>\r\n    <div className='info'>\r\n      <h5>Info</h5>\r\n      <p>Arrow left/right : control</p>\r\n      <p>Enter : flip</p>\r\n      <p>Arrow down : speed</p>\r\n      <p>Space : set now</p>\r\n    </div>\r\n    <div className='settings'>\r\n      <h5>Settings</h5>\r\n      <div className='speed-settings'>\r\n        <div>Speed : </div>\r\n        <input \r\n          type=\"radio\"\r\n          name=\"speed-set\" \r\n          id=\"speed1\" \r\n          value=\"1\"\r\n          disabled={active}\r\n          onChange = {selectSpeedHandler}\r\n        />\r\n        <label htmlFor=\"speed1\">1</label>\r\n        <input \r\n          type=\"radio\"\r\n          name=\"speed-set\" \r\n          id=\"speed2\"\r\n          value=\"2\"\r\n          disabled={active}\r\n          onChange = {selectSpeedHandler}\r\n        />\r\n        <label htmlFor=\"speed2\">2</label>\r\n        <input \r\n          type=\"radio\"\r\n          name=\"speed-set\" \r\n          id=\"speed3\"\r\n          value=\"3\"\r\n          defaultChecked\r\n          disabled={active}\r\n          onChange = {selectSpeedHandler}\r\n        />\r\n        <label htmlFor=\"speed3\">3</label>\r\n        <input \r\n          type=\"radio\"\r\n          name=\"speed-set\" \r\n          id=\"speed4\"\r\n          value=\"4\"\r\n          disabled={active}\r\n          onChange = {selectSpeedHandler}\r\n        />\r\n        <label htmlFor=\"speed4\">4</label>\r\n        <input \r\n          type=\"radio\"\r\n          name=\"speed-set\" \r\n          id=\"speed5\"\r\n          value=\"5\"\r\n          disabled={active}\r\n          onChange = {selectSpeedHandler}      />\r\n        <label htmlFor=\"speed5\">5</label>\r\n      </div>\r\n\r\n      <div className='blocks-settings'>\r\n\r\n        <div>Blocks :</div> \r\n\r\n        <div>\r\n          <input type=\"checkbox\" id=\"cube\" name=\"Cube\" onChange={selectBlocksHandler} defaultChecked disabled = {active}/>\r\n          <label htmlFor=\"cube\">Cube</label>\r\n        </div>\r\n\r\n        <div>\r\n          <input type=\"checkbox\" id=\"line\" name=\"Line\" onChange={selectBlocksHandler} defaultChecked disabled = {active}/>\r\n          <label htmlFor=\"line\">Line</label>\r\n        </div>\r\n\r\n        <div>\r\n          <input type=\"checkbox\" id=\"t\" name=\"T\" onChange={selectBlocksHandler} defaultChecked disabled = {active}/>\r\n          <label htmlFor=\"t\">\"T\"</label>\r\n        </div>\r\n\r\n        <div>\r\n          <input type=\"checkbox\" id=\"l\" name=\"L\" onChange={selectBlocksHandler} defaultChecked disabled = {active}/>\r\n          <label htmlFor=\"l\">\"L\"</label>\r\n        </div>\r\n\r\n        <div>\r\n          <input type=\"checkbox\" id=\"l2\" name=\"L2\" onChange={selectBlocksHandler} defaultChecked disabled = {active}/>\r\n          <label htmlFor=\"l2\">\"L\" - 2</label>\r\n        </div>\r\n\r\n        <div>\r\n          <input type=\"checkbox\" id=\"z\" name=\"Z\" onChange={selectBlocksHandler} defaultChecked disabled = {active}/>\r\n          <label htmlFor=\"z\">\"Z\"</label>\r\n        </div>\r\n\r\n        <div>\r\n          <input type=\"checkbox\" id=\"z2\" name=\"Z2\" onChange={selectBlocksHandler} defaultChecked disabled = {active}/>\r\n          <label htmlFor=\"z2\">\"Z\" - 2</label>\r\n        </div>\r\n\r\n        <div>\r\n          <input type=\"checkbox\" id=\"u\" name=\"U\" onChange={selectBlocksHandler} defaultChecked disabled = {active}/>\r\n          <label htmlFor=\"u\">\"U\"</label>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n    <div className='Link'>GitHub - <a href=\"https://github.com/volodya0/tetris\">https://github.com/volodya0/tetris</a></div>\r\n  </div>\r\n}","/* eslint-disable default-case */\r\nimport { CreateElement } from \"./createElement\"\r\nimport React, {useEffect, useState } from \"react\"\r\nimport uniqid from 'uniqid'\r\nimport { field, cords, configuration } from './types' \r\nimport { Sidebar } from \"./sidebar\"\r\n\r\nconst configInit : configuration = {\r\n  rows : 15,\r\n  columns : 10,\r\n  size : 40,\r\n  interval : 18,\r\n  step : 2,\r\n  blocks : new Set(['Cube', 'Line', 'T', 'L', 'Z', 'U'])\r\n}\r\n\r\nexport const GamePlay = () => {\r\n\r\n  const [config, setConfig] = useState(configInit)\r\n\r\n  const initial : field[][] = new Array(config.rows).fill(null).map(r =>new Array(config.columns).fill(null).map(() => {return{isFill:false}}))\r\n  \r\n  const [state, setState] = useState<field[][]>(initial)\r\n  const [active, setActive] = useState<boolean>(false)\r\n  const [score, setScore]= useState<number>(0)\r\n\r\n  const selectBlocksHandler = (e : React.ChangeEvent<HTMLInputElement>): void => {\r\n    if(!e) return\r\n    setConfig(conf => {\r\n      if(e.target.checked)\r\n        conf.blocks.add(e.target.name)\r\n      else\r\n        conf.blocks.delete(e.target.name)\r\n\r\n      return {...conf}\r\n    })\r\n  }\r\n\r\n  const selectSpeedHandler = (e : React.ChangeEvent<HTMLInputElement>) : void => {\r\n    let interval : number = 0\r\n    let step : number = 0\r\n    switch (e.target.value) {\r\n      case \"1\":\r\n        step = 1\r\n        interval = 16\r\n        break;\r\n      case \"2\":\r\n        step = 1\r\n        interval = 12\r\n        break;\r\n      case \"3\":\r\n        step = 2\r\n        interval = 18\r\n        break;\r\n      case \"4\":\r\n        step = 2\r\n        interval = 14\r\n      break;\r\n      case \"5\":\r\n        step = 2\r\n        interval = 10\r\n      break;\r\n    }\r\n    setConfig({...config, step, interval})\r\n  }\r\n\r\n  const reset = () : void => {\r\n    setActive(false)\r\n    setState(initial)\r\n    setScore(0)\r\n  }\r\n  \r\n  const onLose = () : void => {\r\n    setActive(false)\r\n    alert('you score : '+ score)\r\n    reset()\r\n  }\r\n\r\n  const setBlocks = (arr : cords[], color : string) : void => {\r\n    let removed = 0\r\n    setState(previous => {\r\n\r\n      arr.forEach(({y, x}) => previous[y][x] = {isFill:true, color})\r\n      previous = previous.filter((row) => !row.every(e => e.isFill))\r\n\r\n      while(previous.length < config.rows){\r\n        previous.unshift(new Array(config.columns).fill(null).map(() => { \r\n          return {isFill:false }\r\n        }))\r\n        removed++\r\n      }\r\n\r\n      return [...previous]\r\n    })\r\n    setScore(p => p + removed)\r\n  }\r\n\r\n  function isFreeBlocks(arr : cords[]): boolean{\r\n    if(arr.every(({y, x}) => state[y][x].isFill === false)){\r\n      return true\r\n    }else{\r\n      return false\r\n    }\r\n  }\r\n\r\n  return <div className='container'>\r\n  <div className=\"game-container b\" id = 'game-container'>\r\n    <div className='spawn-element b'>\r\n      <CreateElement  \r\n        config={config} \r\n        setBlocks={setBlocks} \r\n        isFreeBlocks={isFreeBlocks}\r\n        onLose={onLose}\r\n        active={active}\r\n      />\r\n    </div>\r\n    <div>{state.map(row => <Row row={row} key={uniqid()}/>)}</div>\r\n    <button onClick={() => setActive(true)}>Start</button>\r\n    <button onClick={reset}>Reset</button>\r\n    <Score count={score} />\r\n  </div>\r\n   <Sidebar \r\n    active={active} \r\n    selectSpeedHandler={selectSpeedHandler} \r\n    selectBlocksHandler={selectSpeedHandler}/>\r\n  </div>\r\n}\r\n\r\nconst Score : React.FC<{count : number}> = ({count}) =>{\r\n  useEffect(() => {\r\n    let block : HTMLSpanElement | null = document.querySelector('.score')\r\n    if(block)\r\n    block.style.backgroundColor = 'gold'\r\n\r\n    setTimeout(() => {\r\n      if(block)\r\n      block.style.backgroundColor = 'transparent'\r\n    }, 1000)\r\n\r\n  }, [count])\r\n  return <span className='score'>Score {count}</span>\r\n}\r\n\r\nconst Row : React.FC<{row : field[]}> = ({row}) => <div className='g-row'>\r\n    {row.map(field => <Field field={field} key={uniqid()}/>)}\r\n  </div>\r\n\r\nconst Field :  React.FC<{field : field}> = ({field}) =>  <div \r\n    className={field.isFill? 'field fill ' + field.color : 'field empty'}>\r\n  </div>\r\n\r\n","import './App.css';\nimport { GamePlay } from './gamePlay';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <GamePlay/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}